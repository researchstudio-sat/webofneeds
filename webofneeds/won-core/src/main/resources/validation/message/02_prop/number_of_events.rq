prefix dc:    <http://purl.org/dc/elements/1.1/>
prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#>
prefix geo:   <http://www.w3.org/2003/01/geo/wgs84_pos#>
prefix conn:  <http://localhost:8080/won/resource/connection/>
prefix event: <http://localhost:8080/won/resource/event/>
prefix woncrypt: <https://w3id.org/won/core#>
prefix xsd:   <http://www.w3.org/2001/XMLSchema#>
prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfg:   <http://www.w3.org/2004/03/trix/rdfg-1/>
prefix local: <http://localhost:8080/won/resource/>
prefix won:   <https://w3id.org/won/core#>
prefix msg:   <https://w3id.org/won/message#>
prefix signature: <http://icp.it-risk.iwvi.uni-koblenz.de/ontologies/signature.owl#>
prefix ldp:   <http://www.w3.org/ns/ldp#>

#message events check:
#there should be only 1 or 2 message events
#if there are more than 1 events, one of them should be specified in the second one
#as remoteEvent event
#if there is a remote event - only it should have msgType/recipientNodeOrAtom/senderNodeOrAtom specified

#ASK
#{
  SELECT



  ?numEvents
      ?numRemoteEvents
      ?numTypedEvents
      ?numForwardedEvents


      (if(?numEvents != ?numForwardedEvents + ?numRemoteEvents + 1
      || ?numTypedEvents != ?numForwardedEvents + 1
      || ?numEvents != (1 + ?numRemoteEvents + ?numForwardedEvents),
      "FAIL", "OK") AS ?check)

    WHERE
    {

      { SELECT (count(DISTINCT ?event) as ?numEvents)
        WHERE
        {
          GRAPH ?envelope
          {
            ?envelope rdf:type msg:EnvelopeGraph .
            ?envelope rdfg:subGraphOf ?event .
          } .
        }
      }

      { SELECT (count(DISTINCT ?event) as ?numTypedEvents)
        WHERE
        {
          GRAPH ?envelope
          {
            ?envelope rdf:type msg:EnvelopeGraph .
            ?event msg:messageType ?type .
          } .
        }
      }

      # number of remote events with addressing and type correctly related to another event
      { SELECT (count(DISTINCT ?revent) as ?numRemoteEvents)
        WHERE
        {
          GRAPH ?envelope
          {
            ?envelope rdf:type msg:EnvelopeGraph .
            ?event msg:correspondingRemoteMessage ?revent .
          } .
          GRAPH ?renvelope
          {
            ?renvelope rdf:type msg:EnvelopeGraph .
            ?revent msg:recipientAtom|msg:senderAtom|msg:recipientNode|msg:senderNode ?uri .
            ?revent msg:messageType ?type .
            ?renvelope rdfg:subGraphOf ?revent .
          } .
        }
      }

      # number of remote events with addressing and type correctly related to another event
      { SELECT (count(DISTINCT ?revent) as ?numForwardedEvents)
        WHERE
        {
          GRAPH ?envelope
          {
            ?envelope rdf:type msg:EnvelopeGraph .
            ?event msg:forwardedMessage ?revent .
          } .
          GRAPH ?renvelope
          {
            ?renvelope rdf:type msg:EnvelopeGraph .
            ?renvelope rdfg:subGraphOf ?revent .
          } .
        }
      }


    }
#}