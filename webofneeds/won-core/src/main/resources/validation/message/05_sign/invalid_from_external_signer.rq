prefix dc:    <http://purl.org/dc/elements/1.1/>
prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#>
prefix geo:   <http://www.w3.org/2003/01/geo/wgs84_pos#>
prefix conn:  <http://localhost:8080/won/resource/connection/>
prefix event: <http://localhost:8080/won/resource/event/>
prefix woncrypt: <https://w3id.org/won/core#>
prefix xsd:   <http://www.w3.org/2001/XMLSchema#>
prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfg:   <http://www.w3.org/2004/03/trix/rdfg-1/>
prefix local: <http://localhost:8080/won/resource/>
prefix won:   <https://w3id.org/won/core#>
prefix msg:   <https://w3id.org/won/message#>
prefix signature: <http://icp.it-risk.iwvi.uni-koblenz.de/ontologies/signature.owl#>
prefix ldp:   <http://www.w3.org/ns/ldp#>


# 'fromExternal' envelopes should be signed by:
# last closest to leaf - sender node, rest - receiver node

#ASK
#{
  SELECT

    ?type

    ?correctExtLeafEnvNum
    ?correctExtLeafClosestEnvNum

    ?extLeafEnvNum
    ?extLeafClosestEnvNum

    ?extRestEnvNum
    ?correctExtRestEnvNum


    (if(bound(?type) && (?type = msg:AtomHintMessage || ?type = msg:SocketHintMessage ) || (
    ?correctExtLeafEnvNum = ?extLeafEnvNum &&
    ?correctExtLeafClosestEnvNum = ?extLeafClosestEnvNum  &&
    ?correctExtRestEnvNum = ?extRestEnvNum), "OK", "FAIL") AS ?check)


  WHERE
  {
    {SELECT ?type
      WHERE
      {
          graph ?g{
              ?g rdfg:subGraphOf ?event.
                   ?event msg:messageType ?type.
           }
        }
    }

    # count fromExternal leaf envelopes that have correct (sender node) signer
    {SELECT
    (count(DISTINCT ?env) as ?correctExtLeafEnvNum)
    WHERE
    {
      GRAPH ?g1
      {
          # delete the line below and uncomment the next line when
          # the matcher can sign its own envelopes!!!!!!!!!!!!!!!!
          ?event msg:recipientNode    ?envsigner
          #?event msg:senderNode    ?envsigner
      } .
      GRAPH ?env
      {
          ?env a msg:EnvelopeGraph .
          ?env <http://www.w3.org/2004/03/trix/rdfg-1/subGraphOf> ?event .
          ?event a msg:FromExternal .
          FILTER NOT EXISTS
              {  ?env msg:containsEnvelope ?g3 . }
      } .
      GRAPH ?g2
      {
          ?envsig a signature:Signature .
          ?envsig msg:signedGraph ?env .
          ?envsig signature:hasVerificationCertificate ?envsigner .
      } .
    } ORDER BY ?event
    }


    # count all fromExternal leaf envelopes
    {SELECT
    (count (DISTINCT ?g) AS ?extLeafEnvNum)
    WHERE
    {
      GRAPH ?g
      {
          ?event a msg:FromExternal .
          FILTER NOT EXISTS
              {  ?g msg:containsEnvelope ?g2 . }
      } .
    }
    }



    # count fromExternal closest to leaf envelopes that have correct (sender node) signer
    {SELECT
    (count(DISTINCT ?g) as ?correctExtLeafClosestEnvNum)
    WHERE
    {
      GRAPH ?g
      {
          ?event a msg:FromExternal .
          ?g <http://www.w3.org/2004/03/trix/rdfg-1/subGraphOf> ?event .
          ?g msg:containsEnvelope ?g3 .
      } .
      GRAPH ?g3
      {
          ?g3 a msg:EnvelopeGraph .
          ?g3 <http://www.w3.org/2004/03/trix/rdfg-1/subGraphOf> ?leafevent .
      } .
      GRAPH ?g4
      {
          ?leafevent a ?from .
          FILTER (?from not in (msg:FromExternal))
      } .
      GRAPH ?g1
      {
          ?otherevent msg:senderNode    ?envsigner
      } .
      GRAPH ?g5
      {
          ?envsig a signature:Signature .
          ?envsig msg:signedGraph ?g .
          ?envsig signature:hasVerificationCertificate ?envsigner .
      } .
    } ORDER BY ?event
    }


    # count all fromExternal closest to leaf envelopes
    {SELECT
    (count (DISTINCT ?g) AS ?extLeafClosestEnvNum)
    WHERE
    {
        GRAPH ?g
        {
            ?event a msg:FromExternal .
            ?g <http://www.w3.org/2004/03/trix/rdfg-1/subGraphOf> ?event .
            ?g msg:containsEnvelope ?g3 .
        } .
        GRAPH ?g3
        {
            ?g3 a msg:EnvelopeGraph .
            ?g3 <http://www.w3.org/2004/03/trix/rdfg-1/subGraphOf> ?leafevent .
        } .
        GRAPH ?g4
        {
           ?leafevent a ?from .
           FILTER (?from not in (msg:FromExternal))

        } .
    }
    }




    # count correctly signed by receiver node fromExternal not leaf and not closest to leaf envelopes
    {SELECT
    (count(DISTINCT ?g) as ?correctExtRestEnvNum)
    WHERE
    {
      GRAPH ?g
      {
          ?event a msg:FromExternal .
          ?g <http://www.w3.org/2004/03/trix/rdfg-1/subGraphOf> ?event .
          ?g msg:containsEnvelope ?g3 .
      } .
      GRAPH ?g1
      {
          ?otherevent msg:recipientNode    ?envsigner
      } .
      GRAPH ?g3
      {
          ?g3 a msg:EnvelopeGraph .
          ?g3 <http://www.w3.org/2004/03/trix/rdfg-1/subGraphOf> ?leafevent .
      } .
      GRAPH ?g4
      {
         ?leafevent a msg:FromExternal .
      } .
      GRAPH ?g5
      {
          ?envsig a signature:Signature .
          ?envsig msg:signedGraph ?g .
          ?envsig signature:hasVerificationCertificate ?envsigner .
      } .
    } ORDER BY ?event
    }


    # count all fromExternal not leaf and not closest to leaf envelopes
    {SELECT
    (count (DISTINCT ?g) AS ?extRestEnvNum)
    WHERE
    {
        GRAPH ?g
        {
            ?event a msg:FromExternal .
            ?g <http://www.w3.org/2004/03/trix/rdfg-1/subGraphOf> ?event .
            ?g msg:containsEnvelope ?g3 .
        } .
        GRAPH ?g3
        {
            ?g3 a msg:EnvelopeGraph .
            ?g3 <http://www.w3.org/2004/03/trix/rdfg-1/subGraphOf> ?leafevent .
        } .

        GRAPH ?g4
        {
           ?leafevent a msg:FromExternal .
        } .
    }
    }


  }


#}