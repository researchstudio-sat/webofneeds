PREFIX mod: <https://w3id.org/won/modification#>
PREFIX agr: <https://w3id.org/won/agreement#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX msg: <https://w3id.org/won/message#>
PREFIX won: <https://w3id.org/won/core#>

 SELECT ?g ?s ?p ?o WHERE {
    
    filter (?prop != ?clause) .
    filter (?prop != ?acc) .
    
    GRAPH ?g1 {   
        ?prop agr:proposes ?clause .
    }

    GRAPH ?clauseContent {
      ?s ?p ?o .
    }

   GRAPH ?g3 {
        ?clause msg:content ?clauseContent .
    }
        
    # Note: for this pattern, we need the union of all graphs that contain msg:previousMessage triples,
    # Jena provides the special graph name <urn:x-arq:UnionGraph> for querying the union of all the query's graphs
    # THIS QUERY WILL ONLY WORK WITH JENA
    GRAPH <urn:x-arq:UnionGraph> {
        ?prop msg:previousMessage+/msg:correspondingRemoteMessage? ?clause .
        ?acc msg:previousMessage+/msg:correspondingRemoteMessage ?prop .
    }
    GRAPH ?g2 {
        ?acc agr:accepts ?prop .
    }
    
    # only report the first agreement if there are multiple accept messages:
    # make sure there is no earlier accept message than acc, 
    # and if there is an accept message that is at the same point in the conversation 
    # only accept the main solution if acc is lexicographically smaller than the other one
    filter not exists {
       filter(?acc2 != ?acc) . #different from acc
        #find another accept message
        GRAPH ?gf1 {
            ?acc2 agr:accepts ?prop . 
        }   
        GRAPH <urn:x-arq:UnionGraph> {
            # also after prop
            ?acc2 msg:previousMessage+/msg:correspondingRemoteMessage ?prop .
            # acc2 must not be before acc. If it is parallel, use lexicographically first uri
            filter exists {
                # if there is a path from acc to acc2, acc2 is earlier and we want the
                # overall solution to be discarded.
                ?acc msg:previousMessage+ ?acc2.
            }
         
        }
    }
    
    # only report the first agreement if there are multiple accept messages:
    # make sure there is no earlier accept message than acc, 
    # and if there is an accept message that is at the same point in the conversation 
    # only accept the main solution if acc is lexicographically smaller than the other one
    filter not exists {
        filter(?acc2 != ?acc) . #different from acc
        #find another accept message
        GRAPH ?gf1 {
            ?acc2 agr:accepts ?prop .
        }   
        GRAPH <urn:x-arq:UnionGraph> {
            # also after prop
            ?acc2 msg:previousMessage+/msg:correspondingRemoteMessage ?prop .
            # acc2 must not be before acc. If it is parallel, use lexicographically first uri
            filter not exists {
                # if there is a path from acc to acc2, acc2 is earlier and we want the
                # overall solution to be discarded.
                ?acc msg:previousMessage+ ?acc2.
            }
            filter (STR(?acc2) < STR(?acc)) 
        }
    }
    
    filter not exists {
      
      filter (?cancelProp != ?acc) .
      filter (?cancelAcc != ?cancelProp) .
      
      GRAPH ?gc1 {   
          ?cancelProp agr:proposesToCancel ?acc .
      }
      # Note: for this pattern, we need the union of all graphs that contain msg:previousMessage triples,
      # Jena provides the special graph name <urn:x-arq:UnionGraph> for querying the union of all the query's graphs
      # THIS QUERY WILL ONLY WORK WITH JENA
      GRAPH <urn:x-arq:UnionGraph> {      
          ?cancelProp msg:previousMessage+/msg:correspondingRemoteMessage? ?acc .
          ?cancelAcc msg:previousMessage+/msg:correspondingRemoteMessage ?cancelProp .
      }
      GRAPH ?gc2 {
          ?cancelAcc agr:accepts ?cancelProp .
      }  
      GRAPH ?gc3 {
          ?cancelProp msg:content ?gc1.  
      }
      GRAPH ?gc4 {
          ?cancelAcc msg:content ?gc2.  
      }
                  
    }
    

    BIND (?acc as ?g) 

                      
}
order by ?acc