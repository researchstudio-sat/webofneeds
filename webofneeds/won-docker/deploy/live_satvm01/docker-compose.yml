version: "2"
services:
  # letsencrypt container that helps renew the matchat.org (including www.match.org and node.matchat.org) certificate.
  # It is used by the nginx (external matchat representation of owner) and the wonnode.
  # This is only used around every 90 days to manually renew the certificate.
  # To renew the certificate note the following things:
  # - all involved containers (letsencrypt, nginx, wonnode) are configured to mount the right folders
  # - the certificate folder on the host is configured to be "$base_folder/letsencrypt/certs/live/matchat.org"
  # - nginx must be running so that the acme challenge can be executed
  #   (for a new creation of the certificate you can start nginx with the nginx-http-only.conf which doesnt need
  #   certificate file for startup)
  # - execute "docker exec livesatvm01_letsencrypt_1 bash //usr/local/bin/certificate-request-and-renew.sh" for
  #   certificate renewal on host satvm01
  # - this script can be changed for testing e.g. by adding parameters like --dry-run or --test-cert to the certbot
  # - this should renew the letsencrypt certificate in "$base_folder/letsencrypt/certs/live/matchat.org" on the host
  # - check if the .pem files and the java key store files (.jks and .pfx) in the same folder have also been updated
  # - delete all (trust store) files in directory $base_folder/won-client-certs/ on all hosts (satvm01)
  # - redeploy all live containers (with jenkins job)
  # - check if everything works (HTTPS, websocket and JMS communication)
  letsencrypt:
    build: ../../image/letsencrypt
    image: webofneeds/letsencrypt:live
    environment:
      - "key_store_password=$won_certificate_passwd"
    volumes:
      - $base_folder/letsencrypt/certs:/etc/letsencrypt
      - $base_folder/letsencrypt/acme-challenge:/usr/share/nginx/html

  letsencrypt_uki:
    restart: always
    build: ../../image/letsencrypt
    image: webofneeds/letsencrypt:live
    environment:
      - "key_store_password=$uki_certificate_passwd"
      - "domain_params=-d cbi.matchat.org"
      - "key_pem_file=/etc/letsencrypt/live/cbi.matchat.org/privkey.pem"
      - "cert_pem_file=/etc/letsencrypt/live/cbi.matchat.org/fullchain.pem"
      - "pfx_store_file=/etc/letsencrypt/live/cbi.matchat.org/t-key-cert.pfx"
      - "jks_store_file=/etc/letsencrypt/live/cbi.matchat.org/t-keystore.jks"
    volumes:
      - $base_folder/letsencrypt/certs:/etc/letsencrypt
      - $base_folder/letsencrypt/acme-challenge:/usr/share/nginx/html

  # owner server self-signed certificate for communication with wonnode
  gencert:
    build: ../../image/gencert
    image: webofneeds/gencert:live
    environment:
      - "CN=matchat.org"
      - "PASS=file:/usr/local/certs/out/won_certificate_passwd_file"
      - "OPENSSL_CONFIG_FILE=/usr/local/openssl.conf"
    volumes:
      - $base_folder/won-server-certs:/usr/local/certs/out/
      - $base_folder/openssl.conf:/usr/local/openssl.conf

  # nginx proxy server for domains: matchat.org, www.matchat.org, node.matchat.org, uki.matchat.org, node.uki.matchat.org
  nginx:
    restart: always
    image: nginx
    ports:
      - "80:80"
      - "443:443"
      - "61616:61616"
      - "61626:61626"
      - "61611:61611"
      - "61612:61612"
    volumes:
      - $base_folder/letsencrypt/certs:/etc/letsencrypt/
      - $base_folder/nginx.conf:/etc/nginx/nginx.conf
      - $base_folder/nginx-uki-http.conf:/etc/nginx/conf.d/nginx-uki-http.conf
      - $base_folder/letsencrypt/acme-challenge:/usr/share/nginx/html/
      - /data/osmcache/
    depends_on:
      - gencert

  # postgres atom databases for wonnode
  postgres_node:
    restart: always
    image: webofneeds/postgres:live
    build: ../../image/postgres
    environment:
      - "POSTGRES_PASSWORD=$postgres_db_passwd"
      - "PGDATA=/var/lib/postgresql/data/pgdata"
    volumes:
      - $base_folder/postgres_node/data/pgdata:/var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"

  # wonnode with nginx proxy => https://node.matchat.org
  wonnode:
    restart: always
    build: ../../image/wonnode
    image: webofneeds/wonnode:live
    environment:
      - "uri.host=node.matchat.org"
      - "uri.prefix=https://node.matchat.org/won"
      - "http.port=8443"
      - "db.sql.jdbcDriverClass=org.postgresql.Driver"
      - "db.sql.jdbcUrl=jdbc:postgresql://satvm01.researchstudio.at:5433/won_node"
      - "db.ddl.strategy=validate"
      - "db.sql.user=won"
      - "db.sql.password=$postgres_db_passwd"
      - "CERTIFICATE_PASSWORD=$won_certificate_passwd"
      - "activemq.broker.port=61616"
      - "client.authentication.behind.proxy=true"
      - "JMEM_OPTS=-XX:+HeapDumpOnOutOfMemoryError"
    ports:
      - "8443:8443"
      - "61617:61616"
    volumes:
      - $base_folder/letsencrypt/certs/live/matchat.org/fullchain.pem:/usr/local/tomcat/conf/ssl/t-cert.pem
      - $base_folder/letsencrypt/certs/live/matchat.org/privkey.pem:/usr/local/tomcat/conf/ssl/t-key.pem
      - $base_folder/letsencrypt/certs/live/matchat.org/t-key-cert.pfx:/usr/local/tomcat/conf/ssl/t-key-cert.pfx
      - $base_folder/letsencrypt/certs/live/matchat.org/t-keystore.jks:/usr/local/tomcat/conf/ssl/t-keystore.jks
      - $base_folder/won-client-certs/wonnode:/usr/local/tomcat/won/client-certs/
    depends_on:
      - postgres_node
      - nginx

  # postgres atom databases for owner
  postgres_owner:
    restart: always
    image: webofneeds/postgres:live
    build: ../../image/postgres
    environment:
      - "POSTGRES_PASSWORD=$postgres_db_passwd"
      - "PGDATA=/var/lib/postgresql/data/pgdata"
    volumes:
      - $base_folder/postgres_owner/data/pgdata:/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"

  # owner with nginx proxy (https://www.matchat.org)
  owner:
    restart: always
    build: ../../image/owner
    image: webofneeds/owner:live
    environment:
      - "node.default.host=node.matchat.org"
      - "uri.host=www.matchat.org"
      - "http.port=8082"
      - "node.default.http.port=443"
      - "uri.prefix=https://www.matchat.org"
      - "uri.prefix.node.default=https://node.matchat.org/won"
      - "db.sql.jdbcDriverClass=org.postgresql.Driver"
      - "db.sql.jdbcUrl=jdbc:postgresql://satvm01.researchstudio.at:5432/won_owner"
      - "db.ddl.strategy=validate"
      - "db.sql.user=won"
      - "db.sql.password=$postgres_db_passwd"
      - "CERTIFICATE_PASSWORD=$won_certificate_passwd"
      - "owner.webapp.rememberme.key=$rememberme_key"
      - "email.from.won.user=$MAIL_USER"
      - "email.from.won.password=$MAIL_PASS"
      - "email.from.won.smtp.host=$MAIL_HOST"
      - "JMEM_OPTS=-XX:+HeapDumpOnOutOfMemoryError"
    ports:
      - "8082:8443"
    volumes:
      - $base_folder/custom_owner_skin:/usr/local/tomcat/webapps/owner/skin/current/
      - $base_folder/won-server-certs:/usr/local/tomcat/conf/ssl/
      - $base_folder/won-client-certs/owner:/usr/local/tomcat/won/client-certs/
    depends_on:
      - postgres_owner
      - gencert

  # bigdata rdf store for matcher service (this image is not built at deployment, it is downloaded from dockerhub)
  bigdata:
    restart: always
    build: ../../image/bigdata
    volumes:
      - $base_folder/bigdata/data/:/usr/src/bigdata/data
    ports:
      - "10000:9999"

  # matcher service connect with wonnode on (proxied: node.matchat.org)
  matcher_service:
    restart: always
    build: ../../image/matcher-service
    image: webofneeds/matcher_service:live
    environment:
      - "node.host=satvm01.researchstudio.at"
      - "matcher.uri=https://matchat.org/matcher_service"
      - "cluster.seedNodes=satvm01.researchstudio.at:2561,satvm01.researchstudio.at:2562"
      - "uri.sparql.endpoint=http://satvm01.researchstudio.at:10000/blazegraph/namespace/kb/sparql"
      - "wonNodeController.wonNode.crawl=https://node.matchat.org/won/resource"
      - "cluster.local.port=2561"
      - "JMEM_OPTS=-XX:+HeapDumpOnOutOfMemoryError"
    ports:
      - "2561:2561"
    volumes:
      - $base_folder/won-client-certs/matcher_service:/usr/src/matcher-service/client-certs/
    depends_on:
      - bigdata
      - wonnode

  # solr server as an atom index
  solr:
    restart: always
    build: ../../image/solr
    image: webofneeds/solr:live
    volumes:
      - $base_folder/solr/won/data:/opt/solr/server/solr/won/data
      - $base_folder/solr/wontest/data:/opt/solr/server/solr/wontest/data
    ports:
      - "8984:8983"

  # solr matcher and connect to matcher service
  matcher_solr:
    restart: always
    build: ../../image/matcher-solr
    image: webofneeds/matcher_solr:live
    environment:
      - "node.host=satvm01.researchstudio.at"
      - "cluster.seedNodes=satvm01.researchstudio.at:2561,satvm01.researchstudio.at:2562"
      - "cluster.local.port=2562"
      - "matcher.solr.uri.solr.server=http://satvm01.researchstudio.at:8984/solr/"
      - "matcher.solr.uri.solr.server.public=http://satvm01.researchstudio.at:8984/solr/"
      - "JMEM_OPTS=-XX:+HeapDumpOnOutOfMemoryError"
    ports:
      - "2562:2562"
    depends_on:
      - solr
      - matcher_service

  # rescal matcher and connect to matcher service
  matcher_rescal:
    restart: always
    build: ../../image/matcher-rescal
    image: webofneeds/matcher_rescal:live
    environment:
      - "node.host=satvm01.researchstudio.at"
      - "cluster.seedNodes=satvm01.researchstudio.at:2561,satvm01.researchstudio.at:2563"
      - "cluster.local.port=2563"
      - "matcher.rescal.uri.public=http://satvm01.researchstudio.at/rescal/"
      - "matcher.rescal.uri.sparql.endpoint=http://satvm01.researchstudio.at:10000/blazegraph/namespace/kb/sparql"
      - "matcher.rescal.executionDurationMinutes=30"
      - "matcher.rescal.threshold=0.2"
      - "matcher.rescal.rank=10"
      - "JMEM_OPTS=-XX:+HeapDumpOnOutOfMemoryError"
    ports:
      - "2563:2563"
    depends_on:
      - bigdata
      - matcher_service

  # mongodb for persistent debug bot
  mongodb:
    restart: always
    image: tutum/mongodb:3.2
    environment:
      - "MONGODB_USER=won"
      - "MONGODB_DATABASE=live_bot"
      - "MONGODB_PASS=$mongo_db_passwd"
    ports:
      - "27017:27017"
      - "28017:28017"
    volumes:
      - $base_folder/mongodb/data/db:/data/db

  # debug bot used to test atom communication, connect to wonnodes (proxied: node.matchat.org)
  debug_bot:
    restart: always
    build: ../../image/bots
    image: webofneeds/bots:live
    environment:
      - "uri.prefix.owner=https://matchat.org/debug_bot" # set this for the trust store alias
      - "node.default.host=node.matchat.org"
      - "node.default.http.port=443"
      - "uri.prefix.node.default=https://node.matchat.org/won"
      - "won.node.uris=https://node.matchat.org/won/resource"
      - "botContext.impl=mongoBotContext"
      - "botContext.mongodb.user=won"
      - "botContext.mongodb.pass=$mongo_db_passwd"
      - "botContext.mongodb.host=satvm01.researchstudio.at"
      - "botContext.mongodb.port=27017"
      - "botContext.mongodb.database=live_bot"
    depends_on:
      - wonnode
      - mongodb

  # job bot connecting hokify to WoN
  hokify_bot:
    restart: always
    build: ../../image/bots
    image: webofneeds/bots:live
    environment:
      - "uri.prefix.owner=https://matchat.org/hokify_bot" # set this for the trust store alias
      - "MAIN_BOT=won.bot.app.HokifyJobBotApp"
      - "node.default.host=node.matchat.org"
      - "node.default.http.port=443"
      - "uri.prefix.node.default=https://node.matchat.org/won"
      - "won.node.uris=https://node.matchat.org/won/resource"
      - "hokifyjobbot.botname = Hokify Bot"
      - "hokifyjobbot.jsonURL = https://hokify.at/jobfeed-webofneeds.json/"
      - "hokifyjobbot.geoURL = https://nominatim.openstreetmap.org/search"
      - "hokifyjobbot.updateTime = 60"
      - "hokifyjobbot.publishTime = 10"
      - "hokifyjobbot.createAllInOne = false"
      - "botContext.impl=mongoBotContext"
      - "botContext.mongodb.user=won"
      - "botContext.mongodb.pass=$mongo_db_passwd"
      - "botContext.mongodb.host=satvm01.researchstudio.at"
      - "botContext.mongodb.port=27017"
      - "botContext.mongodb.database=live_bot"
    depends_on:
      - mongodb
      - wonnode

  # MySQL database for piwik
  mysql:
    restart: always
    image: mysql:5.7
    ports:
      - "3306:3306"
    volumes:
      - $base_folder/mysql/data:/var/lib/mysql
    environment:
      - "MYSQL_ROOT_PASSWORD=$mysql_passwd"

  # piwik tool for analytics
  piwik:
    restart: always
    image: piwik:latest
    ports:
      - "8080:80"
    volumes:
      - $base_folder/piwik/config:/var/www/html/config
    depends_on:
      - mysql

  matcher_sparql:
    restart: always
    build: ../../image/matcher-sparql
    image: webofneeds/matcher_sparql:int
    environment:
      - "node.host=satvm01.researchstudio.at"
      - "cluster.seedNodes=satvm01.researchstudio.at:2561,satvm01.researchstudio.at:2563"
      - "cluster.local.port=2564"
      - "matcher.sparql.uri.sparql.endpoint=http://satvm01.researchstudio.at:10000/blazegraph/namespace/kb/sparql"
      - "matcher.sparql.uri.public=http://satvm01.researchstudio.at/sparql/"
      - "JMEM_OPTS=-XX:+HeapDumpOnOutOfMemoryError"
    ports:
      - "2564:2564"
    depends_on:
      - matcher_service
    volumes:
      - $base_folder/won-client-certs/matcher_sparql:/usr/src/matcher-sparql/client-certs/
