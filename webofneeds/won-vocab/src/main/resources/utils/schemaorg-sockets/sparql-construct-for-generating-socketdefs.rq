prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
#
# CONSTRUCT query that generates a won:SocketDefinition individual for each property in schema.org
# Checks for schema:inverseOf annotations. If such an annotation is found, the corresponding inverse SocketDefinition
# is added as the compatible one. If no inverse is found, a SocketDefinition is generated that uses the same property, but
# derives it in the inverse direction.
#  
# The query only picks up properties whose range includes subclasses of schema:Thing - so as to avoid datatype properties.

prefix won: <https://w3id.org/won/core#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix schema: <http://schema.org/>
prefix wxs: <https://w3id.org/won/ext/schema#>
construct {
  ?socketDef a won:SocketDefinition;
        won:derivesAtomProperty ?prop ;
		rdfs:label ?socketName ;
        rdfs:comment ?propComment ;
        won:compatibleSocketDefinition ?inverseSocketDef .
		
    ?inverseSocketDefToAdd a won:SocketDefinition;
        won:derivesInverseAtomProperty ?prop ;
		rdfs:label ?inverseSocketName ;
		rdfs:comment ?inversePropComment ;
        won:compatibleSocketDefinition ?socketDef .
    
}
where 
{ 
    {
      ?prop a rdf:Property .
      filter not exists {
          ?prop schema:inverseOf ?inverseProp
      }
      bind (concat(replace(str(?prop), "http://schema.org/", ""),"Inverse") as ?inversePropName)
      bind (false as ?inverseExists)
    } union {
      ?prop a rdf:Property .
      ?prop schema:inverseOf ?inverseProp
      bind (replace(str(?inverseProp), "http://schema.org/", "") as ?inversePropName)
      bind (true as ?inverseExists)
    }
    bind (replace(str(?prop), "http://schema.org/", "") as ?propName)
    bind (concat(ucase(substr(?propName,1,1)), substr(?propName,2)) as ?propNameUppercase)
    bind (concat(?propNameUppercase,"Socket") as ?socketName)
    bind (concat("https://w3id.org/won/ext/schema#",?socketName) as ?socketDefName)
	bind (IRI(?socketDefName) as ?socketDef)
    bind (concat("An Atom `A` that specifies a Socket with this SocketDefinition derives triple `A schema:",?propName, 
                 " B` when a Connection with an Atom B is established. ",
                 "Automatically generated from the [",?propName,"](",STR(?prop),") Property of the http://schema.org vocabulary.") as ?propComment)
    
    bind (concat(ucase(substr(?inversePropName,1,1)), substr(?inversePropName,2)) as ?inversePropNameUppercase)
    bind (concat(?inversePropNameUppercase, "Socket") as ?inverseSocketName)
    bind (concat("https://w3id.org/won/ext/schema#",?inverseSocketName) as ?inverseSocketDefName)
	bind (IRI(?inverseSocketDefName) as ?inverseSocketDef)
    bind (concat("An Atom `A` that specifies a Socket with this SocketDefinition derives triple `B schema:",?propName,
                 " A` when a Connection with an Atom B is established. ",
                 "Automatically generated from the [",?propName,"](",STR(?prop),") Property of the http://schema.org vocabulary.") as ?inversePropComment)
  bind (if (?inverseExists, ?unbound, ?inverseSocketDef) as ?inverseSocketDefToAdd)    
  
  #Filter properties by their range. The range must include things that justify being created as individual Atoms.
  #  
  ?prop schema:rangeIncludes ?range .
  filter exists {  
    # Require that the range includes a subclass of Thing
    ?range rdfs:subClassOf* schema:Thing   
  }
  filter not exists {
    # Do not allow subclasses of schema:Quantity.
  	?range rdfs:subClassOf* schema:Quantity  
  }
  filter not exists {
    # Do not allow subclasses of schema:StructuredValue, except for schema:ContactPoint
  	?cls rdfs:subClassOf* schema:StructuredValue.
    filter(?cls != schema:ContactPoint)
    filter(?cls = ?range)
  }
  # Filter out properties that have been superseded
  filter not exists {
  	?prop schema:supersededBy ?other .  
  }
}