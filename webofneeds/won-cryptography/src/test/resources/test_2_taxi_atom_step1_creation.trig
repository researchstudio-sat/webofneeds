@prefix con:   <https://w3id.org/won/content#> .
@prefix match:   <https://w3id.org/won/matching#> .
@prefix :    no:uri .
@prefix dc:  <http://purl.org/dc/elements/1.1/> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix geo:     <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix xsd:     <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix won:     <https://w3id.org/won/core#> .
@prefix gr:  <http://purl.org/goodrelations/v1#> .
@prefix ldp:     <http://www.w3.org/ns/ldp#> .
@prefix sp:  <http://spinrdf.org/sp#>.
@prefix acco: <http://purl.org/acco/ns#>.
@prefix tio:        <http://purl.org/tio/ns#> .
@prefix sig:     <http://www.example.com/signature#> .

##################################################################
#                     PERMANENT PART
# * If this data changes, a new version of the resource MUST be
# created by the WoN node.
##################################################################

# owner-specified content (permanent):
:#OWN1 {
  _:wonatom won:Atom ;
              won:hasBasicAtomType
                  won:Supply ;
              won:content
                  [ a   won:AtomContent ;
                    won:contentDescription
                    [ a tio:Taxi, gr:SomeItems ;
                          gr:name "Fastest taxi in town"@en ;
                          gr:description "Wherever you want to go, we'll take you there"@en ;
                          # Link to the hotel and its features
                          # tio:operatedBy foo:myCompany; #TODO: how do we want to link to other entities (maybe shared by a number of atoms, like the company here)
                          # tio:operatedBy foo:myDriver;
                          # Price of taxi is actually not that simple to define..
                    ]
                  ] .
}

# signature of the permanent part of data:
:#OWN1 sig:signature [
      rdf:type sig:WonSignature ;
      #TODO:
      # Solve question where to link:
      # 1. Here we could link to the owner's WebID (If there is one).
      # This is of course a privacy issue (making the
      # WebID the owner's pseudonym across a number of atoms).
      # (see https://dvcs.w3.org/hg/WebID/raw-file/tip/spec/identity-respec.htm)
      # 2. We could refer to a public key that is part of the atom RDF.
      #
      # The second case actually makes sense: The correctness of the public key (i.e.
      # it belonging to the real owner) can be verified through parallel channels.
      # In order to allow for distributed access control, trust chains etc, the
      # owner's public key is always needed. (see http://www.w3.org/wiki/WebAccessControl)
      #

      #TODO: find out how we can point the creator property to the new atom's pub key
      sig:creator <http://example.com/webid#key-5>;
      sig:created
              "2013-09-252T10:49:54.050+0000";
"OGQzNGVkMzVmMmQ3ODIyOWM32MzQzNmExMgoYzI4ZDY3NjI4NTIyZTk=" . ] .

##############################################################
#                   TRANSIENT PART
# If this data changes, a new version of the resource MAY be
# created by the WoN node.
##############################################################

# owner-specified content (transient):
:#OWN2 {
  _:wonatom won:atomModality
      [ a   won:AtomModality
         won:locationSpecification  [
         a geo:Point ;
         geo:latitude   "48.2187304" ;
         geo:longitude  "16.3602146"
         ]
      ] .
}
# signature of the transient part of data:
:#OWN2 sig:signature [
      rdf:type sig:WonSignature ;
      sig:creator <http://example.com/webid#key-5>;
      sig:created
              "2013-09-252T10:49:54.050+0000";
"OGQzNGVkMzVmMmQ3ODIyOWM32MzQzNmExMgoYzI4ZDY3NjI4NTIyZTk=" . ] .

##############################################################
#                   OWNER's PUBLIC KEY
# MAY be present. If not, the owner MUST specify a WebID. Using
# both is not allowed.
##############################################################

# owner-specified content (indentification):
:#OWNER-WEBID {
  # this subgraph will make the atom a WebID. If the subgraph is served by the
  # WoN node, the atom URI can be used as a
  # WebID (see http://www.w3 .org/wiki/WebID#PublicKey_WebID )
  # (however, there doesn't seem to be a Class for ECC algos. Add one.)
  _:wonatom cert:key
    [ a :RSAPublicKey;
      rdfs:label "made on 23 November 2011 on my laptop";
      :modulus "00cb24ed85d64d794b69c701c186acc059501e856000f661c93204d8380e07191c5c8b368d2ac32a428acb970398664368dc2a867320220f755e99ca2eecdae62e8d15fb58e1b76ae59cb7ace8838394d59e7250b449176e51a494951a1c366c6217d8768d682dde78dd4d55e613f8839cf275d4c8403743e7862601f3c49a6366e12bb8f498262c3c77de19bce40b32f89ae62c3780f5b6275be337e2b3153ae2ba72a9975ae71ab724649497066b660fcf774b7543d980952d2e8586200eda4158b014e75465d91ecf93efc7ac170c11fc7246fc6ded79c37780000ac4e079f671fd4f207ad770809e0e2d7b0ef5493befe73544d8e1be3dddb52455c61391a1"^^xsd:hexBinary;
      :exponent 65537 ;
    ] .
}

# signature of the webid
:#OWNER-WEBID sig:signature [
      rdf:type sig:WonSignature ;
      # TODO is that correct?:
      # If the public key is provided as part of data
      # and the atom URI is used as WebID  (see above):
      # sig:creator :; # but then the no:uri is webID which is wrong...
      # Or, if external WebID is used, then URI of the WebID:
      sig:creator <http://example.com/webid#key-5>;
      sig:created
              "2013-09-252T10:49:54.050+0000";
"OGQzNGVkMzVmMmQ3ODIyOWM32MzQzNmExMgoYzI4ZDY3NjI4NTIyZTk=" . ] .



##############################################################
#           EXAMPLE DATA WITH ACCESS RESTRICTIONS
#
##############################################################

# owner-specified content that is protected by WebID based ACLs.
# see http://www.w3.org/wiki/WebAccessControl
:#OWNER-INFO {
  _:wonatom owner :#owner
      [ a   won:Owner
         #probably use foaf for specifying accounts
         foaf:jabberId "abcdxyz123@jabber.at";
         foaf:mbox "abcdxyz123@researchstudio.at";
         foaf:address "Thurngasse 8, 1090 Wien";
         dc:description " [superprivateinfo] ";
      ] .
}

# signature of the owner info
:#OWNER-INFO sig:signature [
      rdf:type sig:WonSignature ;
      sig:creator <http://example.com/webid#key-5>;
      sig:created
              "2013-09-252T10:49:54.050+0000";
"OGQzNGVkMzVmMmQ3ODIyOWM32MzQzNmExMgoYzI4ZDY3NjI4NTIyZTk=" . ] .


##############################################################
#               ACCESS CONTROL DATA
# Specifies ACLs for different partitions (named graphs)
# of the atom.
##############################################################

# access control lists based on WebID. Experimental/Tentative!
# see http://www.w3.org/wiki/WebAccessControl
:#ACL {
  _:acl1 [
    acl:agentClass foaf:Agent;
    acl:mode acl:Read;
    acl:accessTo :#OWN1, :#OWN2, :#OWNER-WEBID.
  ].
  _:acl1 [
      acl:agentClass foaf: <[atomURI 1], [WebID2], ...];
      acl:mode acl:Read;
      acl:accessTo :#OWNER-INFO
    ].
}

# signature of the acls
# TODO: is it possible to define ACLs on the RdfNode level or only on the
#       http resource level? If the latter is the case, our model breaks.
#       compare to ldp access control: http://www.w3.org/2012/ldp/wiki/AccessControl
#
:#ACL sig:signature [
      rdf:type sig:WonSignature ;
      sig:creator <http://example.com/webid#key-5>;
      sig:created
              "2013-09-252T10:49:54.050+0000";
"OGQzNGVkMzVmMmQ3ODIyOWM32MzQzNmExMgoYzI4ZDY3NjI4NTIyZTk=" . ] .

:#VERSIONING {
  :#OWN1 a won:VersionedGraph.
  :#OWNER-INFO a won:VersionedGraph.
  :#OWNER-WEBID a won:VersionedGraph.
}

# signature of the versioning
:#VERSIONING sig:signature [
      rdf:type sig:WonSignature ;
      sig:creator <http://example.com/webid#key-5>;
      sig:created
              "2013-09-252T10:49:54.050+0000";
"OGQzNGVkMzVmMmQ3ODIyOWM32MzQzNmExMgoYzI4ZDY3NjI4NTIyZTk=" . ] .

