@prefix con:   <https://w3id.org/won/content#> .
@prefix match:   <https://w3id.org/won/matching#> .
#TODO should here be <http://www.example.com/resource/atom/100> or <http://www.example.com/resource/atom/100/v1>?:
@prefix :    <http://www.example.com/resource/atom/100> .
@prefix dc:  <http://purl.org/dc/elements/1.1/> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix geo:     <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix xsd:     <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix won:     <https://w3id.org/won/core#> .
@prefix gr:  <http://purl.org/goodrelations/v1#> .
@prefix ldp:     <http://www.w3.org/ns/ldp#> .
@prefix sp:  <http://spinrdf.org/sp#>.
@prefix acco: <http://purl.org/acco/ns#>.
@prefix tio:        <http://purl.org/tio/ns#> .
@prefix sig:     <http://www.example.com/signature#> .

##################################################################
#                    WON NODE GENERATED PART
# * If this data changes, a new version of the resource MUST be
# created by the WoN node.
##################################################################

#node-defined content and signature of the owner's permanent part data
:#NOD1 {
  #make initally used blank node equivalent to URI generated later
  _:wonatom owl:sameAs <http://www.example.com/resource/atom/100/v1>;

  #server metadata
            won:latestVersion <http://www.example.com/resource/atom/100>;       #TODO: find vocabulary for versioning
                                                                                #(the mmento framework seems to be a good starting point)
            won:connections <http://www.example.com/resource/atom/100/v1/connections/> ;
            won:atomState won:Active ;
            won:atomCreationDate "2013-09-252T10:49:54.054+0000" ;
            won:wonNode <http://www.example.com/resource/>
            .
 }

#signature of the node-defined content
:#NOD1 sig:signature [
          rdf:type sig:WonSignature ;
          sig:creator <http://example.com/webid#key-5>;
          sig:created
                  "2013-09-252T10:49:54.050+0000";
          sig:signatureValue
    "OGQzNGVkMzVmMmQ3ODIyOWM32MzQzNmExMgoYzI4ZDY3NjI4NTIyZTk=" . ] .

# node cites owner's signature
:#NOD-CITE1 {
# signature of the owner's permanent part of data:
   :#OWN1 sig:signature [
         rdf:type sig:WonSignature ;
         sig:creator <http://example.com/webid#key-5>;
         sig:created
                 "2013-09-252T10:49:54.050+0000";
         sig:signatureValue
   "OGQzNGVkMzVmMmQ3ODIyOWM32MzQzNmExMgoYzI4ZDY3NjI4NTIyZTk=" . ] .
}


#signature of cited owner's signature
#  the full verification of this would require to verify the node signed
#  data with this signature, and then the data of the owner with the
#  owner's signature
:#NOD-CITE1 sig:signature [
          rdf:type sig:WonSignature ;
          sig:creator <http://example.com/webid#key-5>;
          sig:created
                  "2013-09-252T10:49:54.050+0000";
          sig:signatureValue
    "OGQzNGVkMzVmMmQ3ODIyOWM32MzQzNmExMgoYzI4ZDY3NjI4NTIyZTk=" . ] .

:#NOD-CITE2 {
  # signature of the transient part of data:
  :#OWN2 sig:signature [
        rdf:type sig:WonSignature ;
        sig:creator <http://example.com/webid#key-5>;
        sig:created
                "2013-09-252T10:49:54.050+0000";
  "OGQzNGVkMzVmMmQ3ODIyOWM32MzQzNmExMgoYzI4ZDY3NjI4NTIyZTk=" . ] .
}

:#NOD-CITE2 sig:signature [
          rdf:type sig:WonSignature ;
          sig:creator <http://example.com/webid#key-5>;
          sig:created
                  "2013-09-252T10:49:54.050+0000";
          sig:signatureValue
    "OGQzNGVkMzVmMmQ3ODIyOWM32MzQzNmExMgoYzI4ZDY3NjI4NTIyZTk=" . ] .


:#NOD-CITE3 {
  # signature of the webid
  :#OWNER-WEBID sig:signature [
        rdf:type sig:WonSignature ;
        sig:creator <http://example.com/webid#key-5>;
        sig:created
                "2013-09-252T10:49:54.050+0000";
  "OGQzNGVkMzVmMmQ3ODIyOWM32MzQzNmExMgoYzI4ZDY3NjI4NTIyZTk=" . ] .
}

:#NOD-CITE3 sig:signature [
          rdf:type sig:WonSignature ;
          sig:creator <http://example.com/webid#key-5>;
          sig:created
                  "2013-09-252T10:49:54.050+0000";
          sig:signatureValue
    "OGQzNGVkMzVmMmQ3ODIyOWM32MzQzNmExMgoYzI4ZDY3NjI4NTIyZTk=" . ] .


:#NOD-CITE4 {
  # signature of the webid
  :#OWNER-INFO sig:signature [
        rdf:type sig:WonSignature ;
        sig:creator <http://example.com/webid#key-5>;
        sig:created
                "2013-09-252T10:49:54.050+0000";
  "OGQzNGVkMzVmMmQ3ODIyOWM32MzQzNmExMgoYzI4ZDY3NjI4NTIyZTk=" . ] .
}

:#NOD-CITE4 sig:signature [
      rdf:type sig:WonSignature ;
      sig:creator <http://example.com/webid#key-5>;
      sig:created
              "2013-09-252T10:49:54.050+0000";
"OGQzNGVkMzVmMmQ3ODIyOWM32MzQzNmExMgoYzI4ZDY3NjI4NTIyZTk=" . ] .
}

:#NOD-CITE5 {
  :#ACL sig:signature [
      rdf:type sig:WonSignature ;
      sig:creator <http://example.com/webid#key-5>;
      sig:created
              "2013-09-252T10:49:54.050+0000";
  "OGQzNGVkMzVmMmQ3ODIyOWM32MzQzNmExMgoYzI4ZDY3NjI4NTIyZTk=" . ] .
}

:#NOD-CITE5 sig:signature [
      rdf:type sig:WonSignature ;
      sig:creator <http://example.com/webid#key-5>;
      sig:created
              "2013-09-252T10:49:54.050+0000";
"OGQzNGVkMzVmMmQ3ODIyOWM32MzQzNmExMgoYzI4ZDY3NjI4NTIyZTk=" . ] .
}

:#NOD-CITE6 {
  :#VERSIONING sig:signature [
      rdf:type sig:WonSignature ;
      sig:creator <http://example.com/webid#key-5>;
      sig:created
              "2013-09-252T10:49:54.050+0000";
  "OGQzNGVkMzVmMmQ3ODIyOWM32MzQzNmExMgoYzI4ZDY3NjI4NTIyZTk=" . ] .
}

:#NOD-CITE6 sig:signature [
      rdf:type sig:WonSignature ;
      sig:creator <http://example.com/webid#key-5>;
      sig:created
              "2013-09-252T10:49:54.050+0000";
"OGQzNGVkMzVmMmQ3ODIyOWM32MzQzNmExMgoYzI4ZDY3NjI4NTIyZTk=" . ] .
}

##### from here, it's the copy of the owner's input (without signatures)

##################################################################
#                     PERMANENT PART
# * If this data changes, a new version of the resource MUST be
# created by the WoN node.
##################################################################

# owner-specified content (permanent):
:#OWN1 {
  _:wonatom won:Atom ;
              won:hasBasicAtomType
                  won:Supply ;
              won:content
                  [ a   won:AtomContent ;
                    won:contentDescription
                    [ a tio:Taxi, gr:SomeItems ;
                          gr:name "Fastest taxi in town"@en ;
                          gr:description "Wherever you want to go, we'll take you there"@en ;
                          # Link to the hotel and its features
                          # tio:operatedBy foo:myCompany; #TODO: how do we want to link to other entities (maybe shared by a number of atoms, like the company here)
                          # tio:operatedBy foo:myDriver;
                          # Price of taxi is actually not that simple to define..
                    ]
                  ] .
}

##############################################################
#                   TRANSIENT PART
# If this data changes, a new version of the resource MAY be
# created by the WoN node.
##############################################################

# owner-specified content (transient):
:#OWN2 {
  _:wonatom won:atomModality
      [ a   won:AtomModality
         won:locationSpecification  [
         a geo:Point ;
         geo:latitude   "48.2187304" ;
         geo:longitude  "16.3602146"
         ]
      ] .
}

##############################################################
#                   OWNER's PUBLIC KEY
# MAY be present. If not, the owner MUST specify a WebID. Using
# both is not allowed.
##############################################################

# owner-specified content (indentification):
:#OWNER-WEBID {
  # this subgraph will make the atom a WebID. If the subgraph is served by the
  # WoN node, the atom URI can be used as a
  # WebID (see http://www.w3 .org/wiki/WebID#PublicKey_WebID )
  # (however, there doesn't seem to be a Class for ECC algos. Add one.)
  _:wonatom cert:key
    [ a :RSAPublicKey;
      rdfs:label "made on 23 November 2011 on my laptop";
      :modulus "00cb24ed85d64d794b69c701c186acc059501e856000f661c93204d8380e07191c5c8b368d2ac32a428acb970398664368dc2a867320220f755e99ca2eecdae62e8d15fb58e1b76ae59cb7ace8838394d59e7250b449176e51a494951a1c366c6217d8768d682dde78dd4d55e613f8839cf275d4c8403743e7862601f3c49a6366e12bb8f498262c3c77de19bce40b32f89ae62c3780f5b6275be337e2b3153ae2ba72a9975ae71ab724649497066b660fcf774b7543d980952d2e8586200eda4158b014e75465d91ecf93efc7ac170c11fc7246fc6ded79c37780000ac4e079f671fd4f207ad770809e0e2d7b0ef5493befe73544d8e1be3dddb52455c61391a1"^^xsd:hexBinary;
      :exponent 65537 ;
    ] .
}


##############################################################
#           EXAMPLE DATA WITH ACCESS RESTRICTIONS
#
##############################################################

# owner-specified content that is protected by WebID based ACLs.
# see http://www.w3.org/wiki/WebAccessControl
:#OWNER-INFO {
  _:wonatom owner :#owner
      [ a   won:Owner
         #probably use foaf for specifying accounts
         foaf:jabberId "abcdxyz123@jabber.at";
         foaf:mbox "abcdxyz123@researchstudio.at";
         foaf:address "Thurngasse 8, 1090 Wien";
         dc:description " [superprivateinfo] ";
      ] .
}


##############################################################
#               ACCESS CONTROL DATA
# Specifies ACLs for different partitions (named graphs)
# of the atom.
##############################################################

# access control lists based on WebID. Experimental/Tentative!
# see http://www.w3.org/wiki/WebAccessControl
:#ACL {
  _:acl1 [
    acl:agentClass foaf:Agent;
    acl:mode acl:Read;
    acl:accessTo :#OWN1, :#OWN2, :#OWNER-WEBID.
  ].
  _:acl1 [
      acl:agentClass foaf: <[atomURI 1], [WebID2], ...];
      acl:mode acl:Read;
      acl:accessTo :#OWNER-INFO
    ].
}



