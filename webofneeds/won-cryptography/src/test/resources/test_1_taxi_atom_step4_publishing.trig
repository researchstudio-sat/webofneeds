@prefix :        <http://www.example.com/resource/atom/100> .
@prefix dc:      <http://purl.org/dc/elements/1.1/> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix geo:     <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix xsd:     <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix won:     <https://w3id.org/won/core#> .
@prefix gr:      <http://purl.org/goodrelations/v1#> .
@prefix ldp:     <http://www.w3.org/ns/ldp#> .
@prefix sp:      <http://spinrdf.org/sp#>.
@prefix acco:    <http://purl.org/acco/ns#>.
@prefix tio:     <http://purl.org/tio/ns#> .
@prefix sig:     <http://www.example.com/signature#> .
@prefix pav:     <http://purl.org/pav/> .
@prefix owl:     <http://www.w3.org/2002/07/owl#> .

# owner-specified content (permanent):
:OWN1 {
  _:wonatom won:Atom ;
              won:hasBasicAtomType
                  won:Supply ;
              won:content
                  [ a   won:AtomContent ;
                    won:contentDescription
                    [ a tio:Taxi, gr:SomeItems ;
                          gr:name "Fastest taxi in the country"@en ;
                          gr:description "Wherever you want to go, we'll take you there"@en ;
                          # Link to the hotel and its features
                          # tio:operatedBy foo:myCompany; #TODO: how do we want to link to other entities (maybe shared by a number of atoms, like the company here)
                          # tio:operatedBy foo:myDriver;
                          # Price of taxi is actually not that simple to define..
                    ]
                  ] .
}



# owner-specified content (transient):
# doesn't have to be in the named graph, can also be in the default graph
:OWN2 {
  _:wonatom won:atomModality
      [ a   won:AtomModality
         won:locationSpecification  [
         a geo:Point ;
         geo:latitude   "48.2187304" ;
         geo:longitude  "16.3602146"
         ]
      ] .
}




#node-defined content and signature of the owner's permanent part data
:NOD1 {
  _:wonatom owl:sameAs <http://www.example.com/resource/atom/100/v2>;
            pav:previousVersion <http://www.example.com/resource/atom/100/v1>;
            dc:isVersionOf <http://www.example.com/resource/atom/100>;
            won:connections <http://www.example.com/resource/atom/100/v2/connections/> ;
            won:atomState won:Active ;
            won:matcherProtocolEndpoint <http://www.example.com/won/protocol/matcher> ;
            won:atomCreationDate
                                "2013-09-252T10:49:54.054+0000" ;
            won:atomProtocolEndpoint  <http://www.example.com/won/protocol/atom> ;
            won:ownerProtocolEndpoint  <http://www.example.com/won/protocol/owner> .
  <http://www.example.com/resource/atom/100/v2/connections/>
    a   ldp:Container .

  # signature of the owner's permanent part of data:
  # signature of the permanent part of data:
  :OWN1 sig:signature [
        rdf:type sig:WonSignature ;
        sig:creator <http://example.com/webid#key-5>;
        sig:created
                "2013-10-252T10:49:54.050+0000";
  "KlMzNGVkMzVmMmQ3ODIyOWM32MzQzNmExMgoYzI4ZDY3NjI4NTIyZTk=" . ] .

}

# signature of the node-defined data and of the owner's signature.
# the full varification of this would require to verify the node signed
# data with this signature, and then the data of the owner with the
# owner's signature
:NOD1 sig:signature [
      rdf:type sig:WonSignature ;
      sig:creator <http://example.com/webid#key-6>;
      sig:created
        "2013-09-252T10:49:54.054+0000";
      sig:signatureValue
  "QLRzNGVkMzVmMmQ3ODIyOWM32MzQzNmExMgoYzI4ZDY3NjI4NTIyOpN=" . ] .