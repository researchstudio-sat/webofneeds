@prefix con:   <https://w3id.org/won/content#> .
@prefix match:   <https://w3id.org/won/matching#> .
##################################################################
#                 WON NODE PUBLISHES THE ATOM
# The WoN node publishes the graphs from step 01 and 02 and publishes
# its own graph with meta information about the atom.
##################################################################

# URL of the document http://www.example.com/resource/atom/100/v1/meta

@prefix :       <http://www.example.com/resource/atom/100/> .
@prefix owner:  <http://www.example.com/resource/owner/> .
@prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#> .
@prefix geo:    <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix xsd:    <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix cert    <http://www.w3.org/ns/auth/cert#> .
@prefix tio:    <http://purl.org/tio/ns#> .
@prefix won:    <https://w3id.org/won/core#> .
@prefix crypt:  <https://w3id.org/won/cryptography#> .

##################################################################
#                     NODE META DATA ON CONNECTION
# This data can change without releasing a new version of the node.
##################################################################

# To we need to send it back to the owner in a message?

# does it mean the the node has to put it on the server to be accessable under this urL?
:selfconnection#data {
        _:conn rdfs:member :v1/selfconnection/event/1;
        :v1/selfconnection/event/1 a won:Create ;
        _:conn rdfs:member :v1/selfconnection/event/2;
        :v1/selfconnection/event/2 a won:Created .
}


# what happens to the previous signature? copy it in the #data?
:v1/meta#data crypt:signature [
      rdf:type crypt:WonSignature ;

      crypt:signer <http://www.example.com/resource/> ;
      crypt:keyId "87266" ; # <-- given that the WN can have more than one public keys we have to identify the used one
      crypt:created "2013-09-252T10:49:54.050+0000" ;
      crypt:ecdsa_r "d84b41f7e60d0221008552305aee078db8b5a1c75556c4b452a2cc40"^^xsd:hexBinary ;
      crypt:ecdsa_s "375b013732a76aa2ab961e9ced750f2a23a34e5b6d84b41f7e60d022"^^xsd:hexBinary .
      ] .