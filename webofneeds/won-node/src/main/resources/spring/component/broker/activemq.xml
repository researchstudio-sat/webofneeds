<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!-- START SNIPPET: example -->

<spring:beans
        xmlns="http://activemq.apache.org/schema/core"
        xmlns:spring="http://www.springframework.org/schema/beans"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd
  http://www.springframework.org/schema/context
  http://www.springframework.org/schema/context/spring-context-3.1.xsd">


    <!--
         Load properties but ignore unresolvable properties so that
         they are searched in other property configuerers defined in the context
    -->
    <context:property-placeholder location="file:${WON_CONFIG_DIR}/node.properties" ignore-unresolvable="true"/>


    <!--
        The <broker> element is used to configure the ActiveMQ broker.
    -->
    <broker xmlns="http://activemq.apache.org/schema/core" brokerName="wonBroker" persistent="false" >

        <!--
            For better performances use VM cursor and small memory limit.
            For more information, see:

            http://activemq.apache.org/message-cursors.html

            Also, if your producer is "hanging", it's probably due to producer flow control.
            For more information, see:
            http://activemq.apache.org/producer-flow-control.html
        -->
        <!--destinations>
            <queue physicalName="WON.CREATENEED"></queue>
        </destinations-->
        <destinationPolicy>
            <policyMap>
              <policyEntries>
                <policyEntry topic=">" producerFlowControl="true">
                    <!-- The constantPendingMessageLimitStrategy is used to prevent
                         slow topic consumers to block producers and affect other consumers
                         by limiting the number of messages that are retained
                         For more information, see:

                         http://activemq.apache.org/slow-consumer-handling.html

                    -->
                  <pendingMessageLimitStrategy>
                    <constantPendingMessageLimitStrategy limit="50"/>
                  </pendingMessageLimitStrategy>
                </policyEntry>
                <policyEntry queue=">" producerFlowControl="true" memoryLimit="10mb">
                  <!-- Use VM cursor for better latency
                       For more information, see:

                       http://activemq.apache.org/message-cursors.html
                   -->
                  <pendingQueuePolicy>
                    <vmQueueCursor/>
                  </pendingQueuePolicy>

                </policyEntry>
              </policyEntries>
            </policyMap>
        </destinationPolicy>


        <!--
            The managementContext is used to configure how ActiveMQ is exposed in
            JMX. By default, ActiveMQ uses the MBean server that is started by
            the JVM. For more information, see:

            http://activemq.apache.org/jmx.html
        -->
        <managementContext>
            <managementContext createConnector="false"/>
        </managementContext>

        <!--
            Configure message persistence for the broker. The default persistence
            mechanism is the KahaDB store (identified by the kahaDB tag).
            For more information, see:

            http://activemq.apache.org/persistence.html
        -->
        <!--persistenceAdapter>
            <kahaDB directory="dataDirectory"/>
        </persistenceAdapter-->


          <!--
            The systemUsage controls the maximum amount of space the broker will
            use before slowing down producers. For more information, see:
            http://activemq.apache.org/producer-flow-control.html
            If using ActiveMQ embedded - the following limits could safely be used:

        <systemUsage>
            <systemUsage>
                <memoryUsage>
                    <memoryUsage limit="20 mb"/>
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="1 gb"/>
                </storeUsage>
                <tempUsage>
                    <tempUsage limit="100 mb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>
        -->
          <systemUsage>
          <!--sendFailIfNoSpace="true" or sendFailIfNoSpaceAfterTimeout results in ResourceAllocationException if no space on
          broker is available, we can react to this exception on Client side, e.g. an owner can connect to another node -->
            <systemUsage sendFailIfNoSpaceAfterTimeout="3000">
                <memoryUsage>
                    <!-- overall memory for messages on all queues/topics -->
                    <memoryUsage limit="64 mb"/>
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="100 gb"/>
                </storeUsage>
                <tempUsage>
                    <tempUsage limit="50 gb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>

        <!--
            The transport connectors expose ActiveMQ over a given protocol to
            clients and other brokers. For more information, see:

            http://activemq.apache.org/configuring-transports.html
        -->
        <transportConnectors>
                <!--transportConnector name="websocket" uri="ws://0.0.0.0:61614"/-->
            <!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB -->
            <!--transportConnector name="openwire" uri="tcp://localhost:62616?maximumConnections=1000&amp;wireformat.maxFrameSize=104857600"/-->
            <!--transportConnector name="amqp" uri="amqp://localhost:5672?maximumConnections=1000&amp;wireformat.maxFrameSize=104857600"/-->
            <!--transportConnector name="tcp"
            uri="${uri.protocol.activemq}?maximumConnections=1000&amp;wireformat.maxFrameSize=104857600" /-->
            <!--transportConnector name="ssl"
                                uri="${uri.protocol.activemq}?maximumConnections=1000&amp;wireformat.maxFrameSize=104857600&amp;needClientAuth=true&amp;trace=true" /-->

            <transportConnector name="${activemq.broker.scheme}"
                                uri="${activemq.broker.scheme}://0.0.0.0:${activemq.broker.port}?maximumConnections=1000&amp;wireformat.maxFrameSize=104857600&amp;needClientAuth=true" />

            <!--transportConnector name="ssl"
                                uri="${uri.protocol.activemq}?maximumConnections=1000&amp;wireformat.maxFrameSize=104857600&amp;needClientAuth=true&amp;transport.enabledProtocols=TLSv1.2" /-->
            <!-- &amp;transport.enabledProtocols=TLSv1.2-->
            <transportConnector name="vm" uri="vm://localhost?marshal=false&amp;broker.persistent=false" />

        </transportConnectors>
        <sslContext>
            <!--sslContext
                    keyStore="${activemq.broker.keystore}"
                    keyStorePassword="${activemq.broker.keystore.password}"
                    trustStore="${activemq.broker.truststore}"
                    trustStorePassword="${activemq.broker.truststore.password}"-->
                <!-- broker's private key is the same as server's private key, and his trust is defined by the custom trust manager-->
                <sslContext
                        keyStore="${activemq.broker.keystore}"
                        keyStorePassword="${activemq.broker.keystore.password}"
                        >
                    <trustManagers>
                        <spring:bean class="won.cryptography.ssl.TrustManagerWrapperWithTrustService">
                            <spring:constructor-arg ref="trustStoreService" />
                        </spring:bean>
                    </trustManagers>

            <!--TODO problems with key loading and keystore format, and trusting own key -->
                    <!-- Trust/Key managers should correspond to the security/tls config, TODO find a way to impose it, i.e. config should be an argument to the trust/key-manager -->
                    <!--sslContext
                            >

                        <trustManagers>
                            <spring:bean class="won.cryptography.service.WonConfigBasedTrustManagerWrapper">
                                <spring:constructor-arg ref="wonSecurityConfig" />
                                <spring:constructor-arg>
                                    <spring:value type="won.cryptography.service.WonCommunicatingParty">MESSAGING_SERVER</spring:value>
                                </spring:constructor-arg>
                            </spring:bean>
                        </trustManagers>
                        <keyManagers>
                            <spring:bean class="won.cryptography.service.WonConfigBasedKeyManagerWrapper">
                                <spring:constructor-arg ref="wonSecurityConfig" />
                                <spring:constructor-arg>
                                    <spring:value type="won.cryptography.service.WonCommunicatingParty">MESSAGING_SERVER</spring:value>
                                </spring:constructor-arg>
                            </spring:bean>
                        </keyManagers-->
                </sslContext>

        </sslContext>

        <messageAuthorizationPolicy>
            <spring:bean class="won.cryptography.service.MessageOwnerConsumptionPolicy"></spring:bean>
        </messageAuthorizationPolicy>

        <!--networkConnectors>
            <networkConnector uri="static:(tcp://localhost:61617)" ></networkConnector>
        </networkConnectors-->

        <!-- destroy the spring context on shutdown to stop jetty -->
        <shutdownHooks>
            <bean xmlns="http://www.springframework.org/schema/beans" class="org.apache.activemq.hooks.SpringContextHook" />
        </shutdownHooks>

    </broker>

    <!--
        Enable web consoles, REST and Ajax APIs and demos

        Take a look at ${ACTIVEMQ_HOME}/conf/jetty.xml for more details
    -->
    <!-- <import resource="jetty.xml"/>       -->

</spring:beans>
<!-- END SNIPPET: example -->