<?xml version="1.0" encoding="UTF-8"?>
<beans
		xmlns:util="http://www.springframework.org/schema/util"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:camel="http://camel.apache.org/schema/spring"
		xmlns="http://www.springframework.org/schema/beans" xsi:schemaLocation=
				"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
                                 http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
                http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd">
	<!-- Camel configuration -->
	<!--camel:camelContext id="wonNodeCamel" trace="false"  we comment this out for testing if using the 'trace'
    attribute causes the resources for tracing to be allocated (CamelInternalProcessor$BacklogTracerAdvice with 100k
    elements in its queue) -->
	<camel:camelContext id="wonNodeCamel">
		<camel:packageScan>
			<camel:package>won.node.camel.route.fixed</camel:package>
			<camel:excludes>won.node.camel.route.fixed.NewWonMessageRoutes</camel:excludes>
		</camel:packageScan>
		<camel:template id="producerTemplate"/>
	</camel:camelContext>

	<!-- transaction manager for '.transacted' routes -->
	<bean id="PROPAGATION_REQUIRED" class="won.node.camel.tx.SpringTransactionPolicyWithCustomIsolation">
		<property name="transactionManager" ref="transactionManager"/>
		<property name="propagationBehaviorName" value="PROPAGATION_REQUIRED"/>
		<property name="isolationLevelName" value="ISOLATION_READ_COMMITTED" />
	</bean>
	<bean id="PROPAGATION_REQUIRES_NEW" class="won.node.camel.tx.SpringTransactionPolicyWithCustomIsolation">
		<property name="transactionManager" ref="transactionManager"/>
		<property name="propagationBehaviorName" value="PROPAGATION_REQUIRES_NEW"/>
		<property name="isolationLevelName" value="ISOLATION_READ_COMMITTED" />
	</bean>
	<bean id="PROPAGATION_SUPPORTS" class="won.node.camel.tx.SpringTransactionPolicyWithCustomIsolation">
		<property name="transactionManager" ref="transactionManager"/>
		<property name="propagationBehaviorName" value="PROPAGATION_SUPPORTS"/>
		<property name="isolationLevelName" value="ISOLATION_READ_COMMITTED" />
	</bean>
	<bean id="PROPAGATION_NEVER" class="won.node.camel.tx.SpringTransactionPolicyWithCustomIsolation">
		<property name="transactionManager" ref="transactionManager"/>
		<property name="propagationBehaviorName" value="PROPAGATION_NEVER"/>
	</bean>
	<bean id="atomProtocolCommunicationService" class="won.node.camel.AtomProtocolCommunicationServiceImpl">
		<property name="registrationClient" ref="registrationClient" />
	</bean>



	<bean id="messageReferencer" class="won.node.camel.processor.general.MessageReferencer" />
	<bean id="toNodeSender" class="won.node.camel.processor.general.ToNodeSender" />
	<bean id="toOwnerSender" class="won.node.camel.processor.general.ToOwnerSender" />
	<!-- won-specific processors -->
	<bean id="successResponder" class="won.node.camel.processor.general.SuccessResponder" />
	<bean id="failResponder" class="won.node.camel.processor.general.FailResponder" />
	
	<!-- won-specific processors -->
	<!-- start of the pipeline -->
	<bean name="wonMessageIntoCamelProcessor" class="won.protocol.message.processor.camel.WonMessageIntoCamelProcessor" />
	<bean name="uriConsistencyChecker" class="won.protocol.message.processor.camel.WonMessageProcessorCamelAdapter">
		<constructor-arg>
			<bean class="won.protocol.message.processor.impl.UriConsistencyCheckingWonMessageProcessor" />
		</constructor-arg>
	</bean>
	<!-- processor for checking if message event, create atom, or create connection uri is already in use -->
	<bean name="uriInUseChecker" class="won.node.camel.processor.general.UriAlreadyUsedCheckingWonMessageProcessor" />
	<!-- processor for checking well-formedness of messages -->
	<bean name="wellformednessChecker" class="won.protocol.message.processor.camel.WonMessageProcessorCamelAdapter">
		<constructor-arg>
			<bean class="won.protocol.message.processor.impl.WellformednessCheckingWonMessageProcessor"/>
		</constructor-arg>
	</bean>
	<!-- processor for checking signatures -->
	<bean name="signatureChecker" class="won.protocol.message.processor.camel.WonMessageProcessorCamelAdapter">
		<constructor-arg>
			<bean class="won.protocol.message.processor.impl.SignatureCheckingWonMessageProcessor"/>
		</constructor-arg>
	</bean>
	<bean name="aclChecker" class="won.node.camel.processor.general.AclChecker"/>
	<!-- signing messages -->
	<bean id="signatureAddingProcessor" class="won.protocol.message.processor.impl.SignatureAddingWonMessageProcessor">
		<property name="cryptographyService" ref="cryptographyService"/>
	</bean>
	<bean name="signatureToResponseAdder" class="won.protocol.message.processor.camel.WonMessageProcessorCamelAdapter">
		<constructor-arg ref="signatureAddingProcessor"/>
		<constructor-arg name="header">
			<array>
				<util:constant static-field="won.protocol.message.processor.camel.WonCamelConstants.RESPONSE_HEADER"/>
			</array>
		</constructor-arg>
	</bean>
	<bean name="signatureToMessageAdder" class="won.protocol.message.processor.camel.WonMessageProcessorCamelAdapter">
		<constructor-arg ref="signatureAddingProcessor" />
		<constructor-arg name="header">
			<array>
				<util:constant static-field="won.protocol.message.processor.camel.WonCamelConstants.MESSAGE_HEADER" />
			</array>
		</constructor-arg>
	</bean>
	<bean name="persister" class="won.node.camel.processor.general.MessagePersistingProcessor" />
	<bean name="responsePersister" class="won.node.camel.processor.general.ResponsePersistingProcessor" />

	<!-- routing logic for wonMessages, computing which message-type specific processor -->
	<bean name="fixedMessageProcessorSlip" class="won.node.camel.processor.general.MessageTypeSlipComputer">
		<constructor-arg value="won.node.camel.processor.annotation.FixedMessageProcessor" />
	</bean>
	<!-- routing logic for wonMessages, computing which message-type specific processor -->
	<bean name="fixedMessageReactionProcessorSlip" class="won.node.camel.processor.general.MessageTypeSlipComputer">
		<constructor-arg value="won.node.camel.processor.annotation.FixedMessageReactionProcessor"/>
		<constructor-arg name="allowNoMatchingProcessor" value="true"/>
	</bean>
	<bean name="parentLocker" class="won.node.camel.processor.general.LockMessageParentWonMessageProcessor"/>
	<!-- routing logic for wonMessages, computing which socket-specific processor to use -->
	<bean name="socketTypeSlip" class="won.node.camel.processor.general.SocketTypeSlipComputer"/>
	<!-- extraction of connection state for data derivation -->
	<bean name="connectionStateChangeBuilder"
		  class="won.node.camel.processor.general.ConnectionStateChangeBuilderCamelProcessor"/>
	<!--  delete message processor -->
	<bean name="atomDeleter" class="won.node.camel.processor.general.DeleteAtomMessageProcessor"/>
	<!--  merges the message datasets found the message and original message headers -->
	<bean name="responseRoutingInfoExtractor" class="won.node.camel.processor.general.ResponseRoutingInfoExtractor"/>
	<bean name="routingInfoExtractor" class="won.node.camel.processor.general.RoutingInfoExtractor"/>
	<bean name="parentFinder" class="won.node.camel.processor.general.ParentFinder"/>
	<bean name="socketTypeExtractor" class="won.node.camel.processor.general.SocketTypeExtractor"/>
	<bean name="ownerApplicationAuthorizer" class="won.node.camel.processor.general.OwnerApplicationAuthorizer"/>
	<bean name="wonAclEvaluatorFactory" class="won.auth.WonAclEvaluatorFactory"/>

</beans>
