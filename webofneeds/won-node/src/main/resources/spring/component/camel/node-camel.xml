<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jms="http://www.springframework.org/schema/jms"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation=
               "http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
                http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.1.xsd
                http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

    <!--
         Load properties but ignore unresolvable properties so that
         they are searched in other property configurers defined in the context
    -->
    <context:property-placeholder location="file:${WON_CONFIG_DIR}/node.properties" ignore-unresolvable="true"/>

    <!-- Camel configuration -->
    <camel:camelContext id="wonNodeCamel" trace="false">
        <camel:packageScan>
            <camel:package>won.node.camel.route.fixed</camel:package>
        </camel:packageScan>
        <camel:template id="producerTemplate" defaultEndpoint="direct:JMS"/>
    </camel:camelContext>

    <bean id="cachedConnectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
        <property name="targetConnectionFactory" ref="activemqConnectionFactory"></property>
        <property name="sessionCacheSize" value="10"></property>
    </bean>

    <bean id="activemqConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory" depends-on="embeddedBroker" >
        <!-- note: this URI does not need to be configurable via the
        config file, it will be the same on any system -->
        <property name="brokerURL" value="${uri.protocol.activemq}?useLocalHost=false"/>
    </bean>
    <!-- Configuring Broker -->
    <bean id="embeddedBroker" class="org.apache.activemq.xbean.PooledBrokerFactoryBean">
        <property name="config" value="classpath:spring/component/broker/activemq.xml"/>
        <property name="start" value="true"/>
    </bean>
    <bean id="activeMQService" class="won.protocol.jms.ActiveMQServiceImpl">
        <constructor-arg name="type" value="NeedProtocol"/>
    </bean>
    <bean id="brokerComponentFactory" class="won.protocol.jms.BrokerComponentFactory"/>

    <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent" >
        <!-- note: this URI does not need to be configurable via the
        config file, it will be the same on any system -->
        <property name="brokerURL" value="${uri.protocol.activemq}?useLocalHost=false"/>
        <property name="connectionFactory" ref="cachedConnectionFactory"/>
    </bean>
    <bean id="needProtocolCommunicationService" class="won.node.camel.NeedProtocolCommunicationServiceImpl">

    </bean>

    <bean id="ownerProtocolOutgoingMessagesProcessor" class="won.node.camel.processor.general.OwnerProtocolOutgoingMessagesProcessor">
        <property name="queueManagementService" ref="queueManagementService"/>
    </bean>

    <bean name="needProtocolCamelConfigurator" class="won.node.camel.NeedProtocolCamelConfiguratorImpl">
        <property name="componentName" value="activemq"/>
    </bean>

    <bean id="needProtocolOutgoingMessagesProcessor"
          class="won.node.camel.processor.general.NeedProtocolOutgoingMessagesProcessor" />

    <bean id="successResponder"
          class="won.node.camel.processor.general.SuccessResponder" />

    <bean id="toNodeSender"
          class="won.node.camel.processor.general.ToNodeSender" />
    <bean id="toOwnerSender"
          class="won.node.camel.processor.general.ToOwnerSender" />
    <bean id="facetExtractor"
          class="won.protocol.message.processor.camel.FacetExtractingCamelProcessor" />


    <!-- won-specific processors -->
    <bean id="failResponder"
          class="won.node.camel.processor.general.FailResponder" />
    <bean name="resendResponseResponder"
          class="won.node.camel.processor.general.ResponseResenderProcessor"/>
  <!-- won-specific processors -->
  <!-- start of the pipeline -->
  <bean name="wonMessageIntoCamelProcessor" class="won.protocol.message.processor.camel.WonMessageIntoCamelProcessor" />
  <!-- wrapping the messages for storage on node -->
  <bean name="wrapperFromOwner" class="won.protocol.message.processor.camel.WonMessageProcessorCamelAdapter">
    <constructor-arg>
      <bean class="won.node.camel.processor.general.MessageWrappingWonMessageProcessor">
        <constructor-arg name="direction" value="FROM_OWNER" />
      </bean>
    </constructor-arg>
  </bean>
  <bean name="wrapperFromExternal" class="won.protocol.message.processor.camel.WonMessageProcessorCamelAdapter">
    <constructor-arg>
      <bean class="won.node.camel.processor.general.MessageWrappingWonMessageProcessor">
        <constructor-arg name="direction" value="FROM_EXTERNAL" />
      </bean>
    </constructor-arg>
  </bean>
  <!-- wrapping the messages for storage on node -->
  <bean name="wrapperFromSystem" class="won.protocol.message.processor.camel.WonMessageProcessorCamelAdapter">
    <constructor-arg>
      <bean class="won.node.camel.processor.general.MessageWrappingWonMessageProcessor">
        <constructor-arg name="direction" value="FROM_SYSTEM" />
      </bean>
    </constructor-arg>
  </bean>
  <!-- processor for checking if message event, create need, or create connection uri is well-formed -->
  <bean name="uriNodePathChecker" class="won.protocol.message.processor.camel.WonMessageProcessorCamelAdapter">
     <constructor-arg>
       <bean class="won.node.camel.processor.fixed.UriNodePathCheckingWonMessageProcessor">
           <constructor-arg name="needUriPrefix" value="${uri.prefix.need}" />
           <constructor-arg name="eventUriPrefix" value="${uri.prefix.event}" />
       </bean>
     </constructor-arg>
  </bean>
  <!-- processor for checking if message event, create need, or create connection uri is already in use -->
  <bean name="uriInUseChecker" class="won.protocol.message.processor.camel.WonMessageProcessorCamelAdapter">
    <constructor-arg>
      <bean class="won.node.camel.processor.fixed.UriAlreadyUsedCheckingWonMessageProcessor"/>
    </constructor-arg>
  </bean>
  <!-- processor for checking well-formedness of messages -->
  <bean name="wellformednessChecker" class="won.protocol.message.processor.camel.WonMessageProcessorCamelAdapter">
    <constructor-arg>
      <bean class="won.protocol.message.processor.impl.WellformednessCheckingWonMessageProcessor" />
    </constructor-arg>
  </bean>
  <!-- processor for checking signatures -->
  <bean name="signatureChecker" class="won.protocol.message.processor.camel.WonMessageProcessorCamelAdapter">
    <constructor-arg>
      <bean class="won.protocol.message.processor.impl.SignatureCheckingWonMessageProcessor" />
    </constructor-arg>
  </bean>
    <!-- signing messages -->
    <bean id="signatureAddingProcessor" class="won.protocol.message.processor.impl.SignatureAddingWonMessageProcessor">
        <constructor-arg type="java.lang.String" value="${uri.prefix.resource}" />
    </bean>
    <bean name="signatureAdder" class="won.protocol.message.processor.camel.WonMessageProcessorCamelAdapter">
        <constructor-arg ref="signatureAddingProcessor" />
    </bean>
  <!-- persisting messages -->
  <bean name="persister" class="won.protocol.message.processor.camel.WonMessageProcessorCamelAdapter">
    <constructor-arg>
      <bean class="won.node.camel.processor.general.PersistingWonMessageProcessor" />
    </constructor-arg>
  </bean>
  <!-- routing logic for wonMessages, computing which message-type specific processor -->
  <bean name="messageTypeSlip" class="won.node.camel.processor.general.MessageTypeSlipComputer"/>
  <!-- routing logic for wonMessages, computing which facet-specific processor to use -->
  <bean name="facetTypeSlip" class="won.node.camel.processor.general.FacetTypeSlipComputer"/>
</beans>