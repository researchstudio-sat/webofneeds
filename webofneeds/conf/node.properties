#
# Copyright 2012  Research Studios Austria Forschungsges.m.b.H.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#URI prefixes and paths used for HTTP request mapping and creation of new URIs
uri.scheme=https
uri.host=localhost
http.port=8443
uri.prefix=${uri.scheme}://${uri.host}:${http.port}/won

uri.path.resource            =/resource
uri.path.data                =/data
uri.path.page                =/page

uri.prefix.resource   =${uri.prefix}${uri.path.resource}
uri.prefix.data       =${uri.prefix}${uri.path.data}
uri.prefix.page       =${uri.prefix}${uri.path.page}
uri.prefix.node       =${uri.prefix}${uri.path.resource}

#the protocol URIs below must match the activemq config in the webapp
activemq.broker.scheme=ssl
activemq.broker.port=61616
uri.protocol.activemq=${activemq.broker.scheme}://${uri.host}:${activemq.broker.port}
activemq.queuename.atom.incoming=AtomProtocol.in
activemq.queuename.owner.incoming=OwnerProtocol.in
activemq.queuename.matcher.incoming=MatcherProtocol.in
activemq.matcher.outgoing.topicname.atom.created = MatcherProtocol.Out.Atom
activemq.matcher.outgoing.topicname.atom.activated = MatcherProtocol.Out.Atom
activemq.matcher.outgoing.topicname.atom.deactivated = MatcherProtocol.Out.Atom
activemq.matcher.outgoing.topicname.atom.deleted = MatcherProtocol.Out.Atom
activemq.matcher.outgoing.topicname.matcher.registered = MatcherProtocol.Out.Matcher
activemq.broker.keystore=/usr/local/tomcat/conf/ssl/t-keystore.jks
activemq.broker.keystore.password=${CERTIFICATE_PASSWORD}

#default WON node URI
uri.node.default=${uri.prefix.node}

#RDF File storage
rdf.file.path=

#SQL db configuration
#db.sql.jdbcDriverClass=org.postgresql.Driver
#db.sql.jdbcUrl=jdbc:postgresql://localhost:5432/won_node
#db.sql.user=won
#db.sql.password=won
#db.ddl.strategy=validate

#hsql db configuration
db.sql.jdbcDriverClass=org.hsqldb.jdbcDriver
db.sql.jdbcUrl=jdbc:hsqldb:mem:testdb;hsqldb.tx=mvcc
db.sql.user=sa
db.sql.password=
db.ddl.strategy=create

# with file
# jdbc:hsqldb:file:mydb;ifexists=true

#linked data configuration

#maximum number of objects in potentially large, therefore pageable listings
linkeddata.pagesize=500

# number of hints (=connections in state SUGGESTED) at which any additional hint is dropped
# users can receive more hints if they accept or close suggested connections 
ignore.hints.suggested.connection.count.max=50

broker.uri=

#directory where monitoring statistics are periodically dumped (leave empty to let java create temp files)
monitoring.output.dir=
#milliseconds between two consecutive monitoring statistics dumps
monitoring.interval.seconds=3600
#reset the monitoring stats after output? (allows for comparing periods to track change more clearly)
monitoring.reset.after.output=true

# keystore properties
keystore.password=temp
keystore.location=/usr/local/tomcat/won/client-certs/node-keys.jks
#keystore.location=R:/02 projekte aktuell/1305-USS WON-COIN/03 work/Security/test-keystores/node-keys.jks

# truststore properties
truststore.password=temp
truststore.location=/usr/local/tomcat/won/client-certs/node-trusted-certs.jks

# certificate properties
CERTIFICATE_PASSWORD=changeit

# Set this property to true if won node is used behind a reverse proxy server like nginx for example.
# In this case client certificate authentication must be done by the proxy server and a header field
# with the name "X-Client-Certificate" must be added by the proxy to the http request. This header is read
# by the won node to authenticate the client. If this property is set to false (default), the client certificate
# is read as an attribute of the http request.
client.authentication.behind.proxy=false

#
# ATOM INACTIVITY CHECKS and AUTOMATIC DEACTIVATION of ATOMS
#
# The node performs the following data cleanup task regularly (defined by atom.inactivity.check.interval, in seconds):
# Deactivate all active atoms by looking at the timestamp of the last owner-generated message. If the timestamp
# is older than the data.purging.timeout
#
# The time period for checking atom inactivity (in seconds)
# Set to 0 or negative value to disable the check
atom.inactivity.check.interval=0
# The node will send a warning to an atom if its last owner-generated message is older than this value, in seconds
# but not by more than atom.inactivity.check.interval - to avoid sending multiple warnings
atom.inactivity.warn.timeout=604800
# The node will deactivate an atom if its last owner-generated message is older than this value, in seconds, 
# unless it has established connections
atom.inactivity.deactivate.timeout=864000
# The node will deactivate an atom if its last owner-generated message is older than this value, in seconds
atom.inactivity.deactivateDespiteEstablishedConnections.timeout=2592000 

# webid to use for LD requests
http.client.requesterWebId=${uri.prefix.resource}