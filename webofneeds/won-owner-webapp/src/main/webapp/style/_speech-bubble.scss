@import "math";
@import "elevation";

@mixin _speech-bubble(
  $background-color,
  $border-color,
  $triangle-height,
  $border-width,
  $pos,
  $whichPseudoElem: "after"
) {
  position: relative; // to allow positioning the triangle-parts as absolute
  &:#{$whichPseudoElem} {
    content: "";
    display: block; // rly needed?
    background: linear-gradient(
      -45deg,
      rgba(0, 0, 0, 0) 50%,
      $background-color 50%
    );
    // $sizeSq: stripUnit(2 * $triangle-height * $triangle-height);
    // $size: sqrt($sizeSq) * extractUnit($triangle-height);
    $size: sizeOfSquare($triangle-height);
    height: $size;
    width: $size;
    border-color: $border-color;
    border-style: solid;
    position: absolute;
    /* top | right | bottom | left */
    border-width: $border-width 0 0 $border-width;

    @include defaultSpeechBubbleElevation();
    border-radius: 0.19rem;
  }
}

@function sizeOfSquare($triangle-height) {
  $sizeSq: stripUnit(2 * $triangle-height * $triangle-height);
  @return sqrt($sizeSq) * extractUnit($triangle-height);
}

/* *
 * @param $triangleSize: the height of the the speech-bubble-triangle
 * @param $pos: a %-value determining where on the edge the bottom edge triangle is placed. */
@mixin speech-bubble-bottom(
  $background-color,
  $border-color,
  $triangle-height,
  $border-width: $thinBorderWidth,
  $pos: 50%
) {
  background-color: $background-color;
  @include _speech-bubble(
    $background-color,
    $border-color,
    $triangle-height,
    $border-width,
    $pos
  );
  &:after {
    // shifted so pos is around the tip
    left: calc(#{$pos} - #{sizeOfSquare($triangle-height) / 2});
    transform: rotate(225deg);
    /* it rotates first with it's left-upper corner starting at (0,0), thus rotating
    around ($size/2, $size/2) -> we need to shift it up by ($size/2) to make
    sure the center's at the bottom edge of the container. */
    bottom: -sizeOfSquare($triangle-height) / 2;
  }
}
/* *
 * @param $triangleSize: the height of the the speech-bubble-triangle
 * @param $pos: a %-value determining where on the edge the left edge triangle is placed. */
@mixin speech-bubble-left(
  $background-color,
  $border-color,
  $triangle-height,
  $border-width: $thinBorderWidth,
  $pos: 50%
) {
  background-color: $background-color;
  @include _speech-bubble(
    $background-color,
    $border-color,
    $triangle-height,
    $border-width,
    $pos
  );
  &:after {
    // shifted so pos is around the tip
    top: calc(#{$pos} - #{sizeOfSquare($triangle-height) / 2});
    transform: rotate(-45deg);
    /* it rotates first with it's left-upper corner starting at (0,0), thus rotating
    around ($size/2, $size/2) -> we need to shift it up by ($size/2) to make
    sure the center's at the left edge of the container. */
    left: -sizeOfSquare($triangle-height) / 2;
  }
}
/* *
 * @param $triangleSize: the height of the the speech-bubble-triangle
 * @param $pos: a %-value determining where on the edge the right edge triangle is placed. */
@mixin speech-bubble-right(
  $background-color,
  $border-color,
  $triangle-height,
  $border-width: $thinBorderWidth,
  $pos: 50%
) {
  background-color: $background-color;
  @include _speech-bubble(
    $background-color,
    $border-color,
    $triangle-height,
    $border-width,
    $pos
  );
  &:after {
    // shifted so pos is around the tip
    top: calc(#{$pos} - #{sizeOfSquare($triangle-height) / 2});
    transform: rotate(135deg);
    /* it rotates first with it's left-upper corner starting at (0,0), thus rotating
    around ($size/2, $size/2) -> we need to shift it up by ($size/2) to make
    sure the center's at the right edge of the container. */
    right: -sizeOfSquare($triangle-height) / 2;
  }
}
